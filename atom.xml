<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>johnfung&#39;s Blog</title>
  <subtitle>从事项目管理,java开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.pmjohnfung.com/"/>
  <updated>2017-06-27T02:47:15.000Z</updated>
  <id>http://www.pmjohnfung.com/</id>
  
  <author>
    <name>johnfung</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scrum and kanban diff</title>
    <link href="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/scrum-and-kanban-diff/"/>
    <id>http://www.pmjohnfung.com/categories/生活/scrum-and-kanban-diff/</id>
    <published>2017-06-27T02:27:50.000Z</published>
    <updated>2017-06-27T02:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrume-和-kanban-解析"><a href="#scrume-和-kanban-解析" class="headerlink" title="scrume 和 kanban 解析"></a>scrume 和 kanban 解析</h1><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><h3 id="scrum"><a href="#scrum" class="headerlink" title="scrum"></a>scrum</h3><blockquote>
<p>橄榄球式的竞争方式；现在是敏捷软件开发；</p>
</blockquote>
<h3 id="kanban"><a href="#kanban" class="headerlink" title="kanban"></a>kanban</h3><blockquote>
<p>丰田的JIT“JUST IN TIME”;</p>
</blockquote>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="scrum-1"><a href="#scrum-1" class="headerlink" title="scrum"></a>scrum</h3><ul>
<li>scrum 核心是“化繁为简”；</li>
<li>团队角色划分为三个：scrum master,product owner,scrum team</li>
<li>产品需求拆成story，优先级排定；</li>
<li>时间拆，将项目周期拆成固定的迭代周期，每个迭代周期内的交付成果可验证；</li>
<li>变更：当前迭代过程中不允许增加需求，新增加的可放到下一个sprint backlog里；</li>
</ul>
<h3 id="kanban-1"><a href="#kanban-1" class="headerlink" title="kanban"></a>kanban</h3><ul>
<li>kanban 核心是“可视化的任务流转”</li>
<li>限制WIP（work in process），限定状态下的工作任务量；减少同一状态任务或价值的堆积；</li>
<li>直观的反应当前任务情况，反应流动过程中的瓶颈和问题，为团队改善提供依据；</li>
<li>变更：生产力允许的情况下就可以增加；</li>
</ul>
<h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><ul>
<li>都是敏捷和精益的思想；</li>
<li>都是尽早交付价值；</li>
<li>持续改进，显化问题；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;scrume-和-kanban-解析&quot;&gt;&lt;a href=&quot;#scrume-和-kanban-解析&quot; class=&quot;headerlink&quot; title=&quot;scrume 和 kanban 解析&quot;&gt;&lt;/a&gt;scrume 和 kanban 解析&lt;/h1&gt;&lt;h2 id=&quot;起
    
    </summary>
    
      <category term="生活" scheme="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>读书清单</title>
    <link href="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/read-book-list/"/>
    <id>http://www.pmjohnfung.com/categories/生活/read-book-list/</id>
    <published>2017-06-26T02:43:32.000Z</published>
    <updated>2017-06-26T02:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读书清单"><a href="#读书清单" class="headerlink" title="读书清单"></a>读书清单</h1><ul>
<li>精益创业（The Lean Startup）—埃里克•莱斯</li>
<li>Software Project Manager’s Bridge to Agility—Michele Sliger与Stacia Broderick</li>
<li>Managing Agile Projects with Scrum —Ken Schwaber</li>
<li>Agile Software Development, Principles, Patterns, and Practices —  Robert C. Martin</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读书清单&quot;&gt;&lt;a href=&quot;#读书清单&quot; class=&quot;headerlink&quot; title=&quot;读书清单&quot;&gt;&lt;/a&gt;读书清单&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;精益创业（The Lean Startup）—埃里克•莱斯&lt;/li&gt;
&lt;li&gt;Software Project 
    
    </summary>
    
      <category term="生活" scheme="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>mac 操作</title>
    <link href="http://www.pmjohnfung.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mac-option/"/>
    <id>http://www.pmjohnfung.com/categories/工具使用/mac-option/</id>
    <published>2017-06-14T02:40:08.000Z</published>
    <updated>2017-06-14T02:43:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动与选取"><a href="#移动与选取" class="headerlink" title="移动与选取"></a>移动与选取</h1><ul>
<li>Cmd + ← 移至行首 (Home)</li>
<li>Cmd + → 移至行尾 (End)</li>
<li>Fn + ↓ 向下翻页 (PageUp)</li>
<li>Fn + ↑ 向上翻页 (PageDown)</li>
<li>Cmd + ↑ 回到顶部</li>
<li>Cmd + ↓ 跳到底部</li>
<li>Option + ← 向前跳一个词</li>
<li>Option + → 向后跳一个词</li>
</ul>
<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><ul>
<li>Fn+delete 向后删除</li>
<li>Fn+Option+delete 按词删除</li>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;移动与选取&quot;&gt;&lt;a href=&quot;#移动与选取&quot; class=&quot;headerlink&quot; title=&quot;移动与选取&quot;&gt;&lt;/a&gt;移动与选取&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Cmd + ← 移至行首 (Home)&lt;/li&gt;
&lt;li&gt;Cmd + → 移至行尾 (End)&lt;/li&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://www.pmjohnfung.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>工作历程总结</title>
    <link href="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/my-company-summary/"/>
    <id>http://www.pmjohnfung.com/categories/生活/my-company-summary/</id>
    <published>2017-04-14T03:18:45.000Z</published>
    <updated>2017-04-14T05:19:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作历程总结"><a href="#工作历程总结" class="headerlink" title="工作历程总结"></a>工作历程总结</h1><h2 id="第一份工作"><a href="#第一份工作" class="headerlink" title="第一份工作"></a>第一份工作</h2><p><strong>总结：</strong> 开始接触项目管理，传统项目、单项目长周期的项目的管理，按照标准CMMI 3级标准执行；</p>
<h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><ol>
<li>开始工作，一切都需要学习；</li>
<li>JAVA开发3年后转项目经理；</li>
<li>与政府工作人员的沟通，提高他们的满意度；</li>
<li>撰写多类投标文件、可行性方案（无经验情况下）；</li>
<li>多分包单位的沟通协调、进度把控；</li>
</ol>
<h3 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h3><ol>
<li>多与入职早的同事沟通学习；</li>
<li>参加项目管理培训、考取PMP、高级软考项目经理证书，增强理论基础；</li>
<li>针对于政府工作人员的沟通，从业务角度、技术知识等方面入手，做到专业性，实质能够快速响应与解决提出的问题，或提出好的解决方案；</li>
<li>多去运用理论知识去指导实践，以及多在实践中发现问题后进行总结；</li>
</ol>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ol>
<li>工作的启蒙阶段，认识自己的工作岗位，锻炼了JAVA开发经验、初期项目管理经验；</li>
<li>参与了公司CMMI 3级体系的建设工作，并且按照此体系做项目管理；</li>
<li>接触并实践了可行性方案、技术方案的编写工作；</li>
</ol>
<h2 id="第二份工作"><a href="#第二份工作" class="headerlink" title="第二份工作"></a>第二份工作</h2><p><strong>总结：</strong> 开启互联网项目、多项目、高强度高压力项目、周期短、团队规模大的项目的管理工作；</p>
<h3 id="收获-1"><a href="#收获-1" class="headerlink" title="收获"></a>收获</h3><ol>
<li>时间的管理方法；</li>
<li>压力的处理；</li>
</ol>
<h2 id="第三份工作"><a href="#第三份工作" class="headerlink" title="第三份工作"></a>第三份工作</h2><p><strong>总结：</strong> 开始从0到1建立项目管理体系，思考更多，管理范围更广；</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工作历程总结&quot;&gt;&lt;a href=&quot;#工作历程总结&quot; class=&quot;headerlink&quot; title=&quot;工作历程总结&quot;&gt;&lt;/a&gt;工作历程总结&lt;/h1&gt;&lt;h2 id=&quot;第一份工作&quot;&gt;&lt;a href=&quot;#第一份工作&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="生活" scheme="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>互联网项目管理体会（一）</title>
    <link href="http://www.pmjohnfung.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/project-manager-experience-1/"/>
    <id>http://www.pmjohnfung.com/categories/项目管理/project-manager-experience-1/</id>
    <published>2017-02-22T09:17:30.000Z</published>
    <updated>2017-02-22T13:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求的控制"><a href="#需求的控制" class="headerlink" title="需求的控制"></a>需求的控制</h1><hr>
<h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h2><p>项目因素种种，我认为需求的影响力应该占项目因素的60%及以上，如果一个项目能够控制好需求，项目也就成功了一半以上；</p>
<p>项目是为创造独特的产品、服务或成果而进行的一次性努力；其中一个关键点是：产品、服务或成果，我们需要在项目实施之前有明确的产品目标或成果，如果在项目开展过程中不断的去修改产品，最直接的影响是项目的工期，也可能会导致项目的失败，所以如何去控制需求，如果更好的实现需求是需要项目经理重点考虑的内容；</p>
<h2 id="需求控制方法"><a href="#需求控制方法" class="headerlink" title="需求控制方法"></a>需求控制方法</h2><ol>
<li><p>产品经理或产品质量的管控</p>
<p> 项目的需求可能来自于多个角色，但是最后的入口肯定只有一个，那就是产品经理，产品经理控制着需求的变更与否，如果能够遇到一个好的产品经理，项目经理的工作将轻松很多，但是很多时候是没有那么完美的事情，这时就需要项目经理发挥对需求的管控，在项目开始之初就需要重点关注需求的内容，需具备需求的识别和判断力，不为别的，只为能够更好的屏蔽项目潜在的风险，使项目按既定的目标完成。具体做法可每次PRD产生时作为项目经理认真阅读，真正清楚需求的价值、需求的合理性、需求的时效性，及时指正PRD中的不足，真正做到每次PRD都是有价值的，资源未做无用功，需求可阶段性乃至长期存活，而不是上线一周就被迫下线；</p>
<p> 我这项目管理过程中遇到的一类问题是需求有明确的目标、PRD的设计也相对合理，但是未分析需求的风险，产品的产出未与当前的政策形势关联，最后导致做了一半的项目因为需要根据外在政策因素而重新修改PRD；结果导致项目的延期；其实这个问题在项目开始之前就可以被发现，可是并未如此，假如项目经理能够更多的了解所负责方向的政策导向的话是不是就可减轻需求变更的风险呢，作为我个人感觉，这个答案是肯定的，我们是对项目结果负责的，虽然我了解到一些公司项目经理不对结果负责，but 我认为我们应该对自己要求高一些。</p>
<p> 我还遇到过一个情景，那就是刚毕业的产品经理或未从事过当前行业的产品经理，这种应该是项目经理最头痛的事情了，因为多数情况下输出的成功并不能达到要求，那作为项目经理如何做呢？向他们领导抱怨？还是随遇而安？no,抱怨不能根本上解决问题，现多数互联网公司都是缺有经验的PM，随遇而安也只能让项目增加很多小插曲，直至项目失败。我认为针对当前的当务之急那就是将即将看着的PRD去完善，协调经验丰富的PM对当前PM进行授人以渔的经验，以及项目经理对PM的学习指引，面对长期工作的开展就是需要项目经理去组织分享会，有针对性的去分享，虽然项目经理不是最专业的，但是项目经理识别有价值资源是最专业的，对症下药，邀请更加专业的PM进行培训。还有一个办法即简化PRD，逐步完善，也能将风险控制在可控范围内。</p>
</li>
<li><p>平衡产品、工期、质量</p>
<p> 互联网项目的管理特点如用一个字来概括，我认为应该是“快”，快就势必会导致不完美的PRD、不富裕的工期、不杠杠的质量，就会遇到范围、时间、成本、质量如何权衡的问题，这就需要产品经理能够区分出当前是完美的PRD重要还是快速上线重要，如PRD能够清晰的反应这点那项目经理会更容易的去管理项目，是重点控制时间还是控制范围更重要；</p>
</li>
</ol>
<h1 id="项目节奏的控制"><a href="#项目节奏的控制" class="headerlink" title="项目节奏的控制"></a>项目节奏的控制</h1><h1 id="项目风险的控制"><a href="#项目风险的控制" class="headerlink" title="项目风险的控制"></a>项目风险的控制</h1><h1 id="项目资源的控制"><a href="#项目资源的控制" class="headerlink" title="项目资源的控制"></a>项目资源的控制</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求的控制&quot;&gt;&lt;a href=&quot;#需求的控制&quot; class=&quot;headerlink&quot; title=&quot;需求的控制&quot;&gt;&lt;/a&gt;需求的控制&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;重要性&quot;&gt;&lt;a href=&quot;#重要性&quot; class=&quot;headerlink&quot; title=&quot;重要
    
    </summary>
    
      <category term="项目管理" scheme="http://www.pmjohnfung.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="互联网" scheme="http://www.pmjohnfung.com/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="项目管理" scheme="http://www.pmjohnfung.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="经验" scheme="http://www.pmjohnfung.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>密等性设计</title>
    <link href="http://www.pmjohnfung.com/categories/Architecture/idempotent/"/>
    <id>http://www.pmjohnfung.com/categories/Architecture/idempotent/</id>
    <published>2017-02-03T04:10:36.000Z</published>
    <updated>2017-02-03T07:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="数学定义"><a href="#数学定义" class="headerlink" title="数学定义"></a>数学定义</h2><blockquote>
<p>在数学里，幂等有两种主要的定义：</p>
<ul>
<li><p>在某二元运算下，幂等元素是指被自己重复运算(或对于函数是为复合)的结果等于它自己的元素。例如，乘法下唯一两个幂等实数为0和1。 即 s *s = s</p>
</li>
<li><p>某一元运算为幂等的时，其作用在任一元素两次后会和其作用一次的结果相同。例如，高斯符号便是幂等的，即f(f(x)) = f(x)。 </p>
</li>
</ul>
</blockquote>
<h2 id="HTTP定义"><a href="#HTTP定义" class="headerlink" title="HTTP定义"></a>HTTP定义</h2><p>在HTTP/1.1规范中幂等性的定义是：</p>
<blockquote>
<p>A request method is considered “idempotent” if the intended effect onthe server of multiple identical requests with that method is the same as the effect for a single such request. Of the request methods defined by this specification, PUT, DELETE, and safe request methods are idempotent.</p>
</blockquote>
<p>HTTP的幂等性指的是一次和多次请求某一个资源应该具有相同的副作用。如通过PUT接口将数据的Status置为1，无论是第一次执行还是多次执行，获取到的结果应该是相同的，即执行完成之后Status =1。</p>
<h1 id="实际业务密等"><a href="#实际业务密等" class="headerlink" title="实际业务密等"></a>实际业务密等</h1><p>订单支付的过程，需要做密等操作，否则会重复扣款；</p>
<p>1.订单系统负责状态更新，支付系统负责付款</p>
<p>参数只有支付用户号（accountid）、支付金额(amount)；</p>
<p>如遇网络问题，在支付扣款成功但是无法接受到返回，则可能多重复下单并且支付扣款，造成用户重复支付；</p>
<p>2.支持密等，解决重复下单的问题</p>
<p>参数增加订单号（orderid）</p>
<p>确保订单的唯一性，在支付时校验订单状态，如未支付则发起支付，如已支付或支付中则返回当前结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;h2 id=&quot;数学定义&quot;&gt;&lt;a href=&quot;#数学定义&quot; class=&quot;headerlink&quot; title=&quot;数学定义&quot;&gt;&lt;/a&gt;数学定义&lt;/h
    
    </summary>
    
      <category term="Architecture" scheme="http://www.pmjohnfung.com/categories/Architecture/"/>
    
    
      <category term="密等性" scheme="http://www.pmjohnfung.com/tags/%E5%AF%86%E7%AD%89%E6%80%A7/"/>
    
      <category term="分布式" scheme="http://www.pmjohnfung.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>新的一年开始了</title>
    <link href="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/new-year-go/"/>
    <id>http://www.pmjohnfung.com/categories/生活/new-year-go/</id>
    <published>2017-02-03T03:13:50.000Z</published>
    <updated>2017-02-03T03:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>年已悄然走过，</p>
<p>迎来了工作的第一天，</p>
<p>迎来了新的机遇与挑战，</p>
<p>投入到新的“战斗中”，</p>
<p>2017，定义主题“超越自己”，</p>
<p>2017，加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年已悄然走过，&lt;/p&gt;
&lt;p&gt;迎来了工作的第一天，&lt;/p&gt;
&lt;p&gt;迎来了新的机遇与挑战，&lt;/p&gt;
&lt;p&gt;投入到新的“战斗中”，&lt;/p&gt;
&lt;p&gt;2017，定义主题“超越自己”，&lt;/p&gt;
&lt;p&gt;2017，加油！&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="新年" scheme="http://www.pmjohnfung.com/tags/%E6%96%B0%E5%B9%B4/"/>
    
      <category term="新气象" scheme="http://www.pmjohnfung.com/tags/%E6%96%B0%E6%B0%94%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="http://www.pmjohnfung.com/categories/java/idea-key/"/>
    <id>http://www.pmjohnfung.com/categories/java/idea-key/</id>
    <published>2017-01-19T02:45:27.000Z</published>
    <updated>2017-01-19T02:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">⌃Space 基本的代码补全（补全任何类、方法、变量）</div><div class="line">⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）</div><div class="line">⌘⇧↩ 自动结束代码，行末自动添加分号</div><div class="line">⌘P 显示方法的参数信息</div><div class="line">⌃J, Mid. button click 快速查看文档</div><div class="line">⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</div><div class="line">⌘+鼠标放在代码上 显示代码简要信息</div><div class="line">⌘F1 在错误或警告处显示具体描述信息</div><div class="line">⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）</div><div class="line">⌃O 覆盖方法（重写父类方法）</div><div class="line">⌃I 实现方法（实现接口中的方法）</div><div class="line">⌘⌥T 包围代码（使用<span class="keyword">if</span>..<span class="keyword">else</span>, <span class="keyword">try</span>..<span class="keyword">catch</span>, <span class="keyword">for</span>, <span class="keyword">synchronized</span>等包围选中的代码）</div><div class="line">⌘/ 注释/取消注释与行注释</div><div class="line">⌘⌥/ 注释/取消注释与块注释</div><div class="line">⌥↑ 连续选中代码块</div><div class="line">⌥↓ 减少当前选中的代码块</div><div class="line">⌃⇧Q 显示上下文信息</div><div class="line">⌥↩ 显示意向动作和快速修复代码</div><div class="line">⌘⌥L 格式化代码</div><div class="line">⌃⌥O 优化<span class="keyword">import</span></div><div class="line">⌃⌥I 自动缩进线</div><div class="line">⇥ / ⇧⇥ 缩进代码 / 反缩进代码</div><div class="line">⌘X 剪切当前行或选定的块到剪贴板</div><div class="line">⌘C 复制当前行或选定的块到剪贴板</div><div class="line">⌘V 从剪贴板粘贴</div><div class="line">⌘⇧V 从最近的缓冲区粘贴</div><div class="line">⌘D 复制当前行或选定的块</div><div class="line">⌘⌫ 删除当前行或选定的块的行</div><div class="line">⌃⇧J 智能的将代码拼接成一行</div><div class="line">⌘↩ 智能的拆分拼接的行</div><div class="line">⇧↩ 开始新的一行</div><div class="line">⌘⇧U 大小写切换</div><div class="line">⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始</div><div class="line">⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）</div><div class="line">⌥⌫ 删除到单词的开头</div><div class="line">⌘+ / ⌘- 展开 / 折叠代码块</div><div class="line">⌘⇧+ 展开所以代码块</div><div class="line">⌘⇧- 折叠所有代码块</div><div class="line">⌘W 关闭活动的编辑器选项卡</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
      <category term="java" scheme="http://www.pmjohnfung.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>防火墙操作</title>
    <link href="http://www.pmjohnfung.com/categories/linux/linux-firewall/"/>
    <id>http://www.pmjohnfung.com/categories/linux/linux-firewall/</id>
    <published>2017-01-11T04:07:33.000Z</published>
    <updated>2017-01-11T04:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>在/etc/sysconfig/iptables里添加</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/iptables</div></pre></td></tr></table></figure>
<p>添加一条配置规则，如要想开放8080的端口，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 –j ACCEPT</div></pre></td></tr></table></figure>
<ol>
<li>重启iptables</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#/etc/init.d/iptables restart</div></pre></td></tr></table></figure>
<ol>
<li>看下状态</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /etc/init.d/iptables status</div></pre></td></tr></table></figure>
<ol>
<li>关闭防火墙</li>
</ol>
<ul>
<li>重启后永久性生效：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">开启：chkconfig iptables on</div><div class="line">关闭：chkconfig iptables off</div></pre></td></tr></table></figure>
<ul>
<li>即时生效，重启后失效（即重启后防火墙自动开启）：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">开启：service iptables start</div><div class="line">关闭：service iptables stop</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;在/etc/sysconfig/iptables里添加&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.pmjohnfung.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>5E 模型</title>
    <link href="http://www.pmjohnfung.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/5E-model/"/>
    <id>http://www.pmjohnfung.com/categories/项目管理/5E-model/</id>
    <published>2017-01-10T11:38:35.000Z</published>
    <updated>2017-01-11T04:26:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5E模型"><a href="#5E模型" class="headerlink" title="5E模型"></a>5E模型</h1><ul>
<li>Envision（高瞻远瞩）</li>
<li>Engage（全情投入）</li>
<li>Energize（鼓舞士气）</li>
<li>Enable（授人以渔）</li>
<li>Execute（卓越执行）</li>
</ul>
<h1 id="Envision（高瞻远瞩）"><a href="#Envision（高瞻远瞩）" class="headerlink" title="Envision（高瞻远瞩）"></a>Envision（高瞻远瞩）</h1><p>在项目管理角度讲需要设定明确的项目目标，启动会让项目成员对目标达成一致的理解；</p>
<h1 id="Engage（全情投入）"><a href="#Engage（全情投入）" class="headerlink" title="Engage（全情投入）"></a>Engage（全情投入）</h1><p>即团队合作，使团队按照既定的目标进行，帮助团队成员完成既定的KPI、绩效增长点或能力增长点；</p>
<h1 id="Energize（鼓舞士气）"><a href="#Energize（鼓舞士气）" class="headerlink" title="Energize（鼓舞士气）"></a>Energize（鼓舞士气）</h1><p>鼓舞团队的热情和士气，使团队始终保持在高昂的工作状态；多表扬，少批评，鼓励为主；</p>
<h1 id="Enable（授人以渔）"><a href="#Enable（授人以渔）" class="headerlink" title="Enable（授人以渔）"></a>Enable（授人以渔）</h1><p>构建团队整体的能力，培训与教授，重在授人以渔；</p>
<h1 id="Execute（卓越执行）"><a href="#Execute（卓越执行）" class="headerlink" title="Execute（卓越执行）"></a>Execute（卓越执行）</h1><p>要率先垂范，亲身投入完美执行的推动，结果导向。</p>
<ol>
<li>项目启动会</li>
<li>项目例会（1周一次或2周一次，根据项目区别对待）</li>
<li>计划，必须有buffer时间</li>
<li>沟通，需与每个项目组成员去沟通，了解每个人的诉求；</li>
</ol>
<p>认同的一点：级别压人属于最低的项目管理模式，如何协调比自己级别高的人员才是一门学问；</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;5E模型&quot;&gt;&lt;a href=&quot;#5E模型&quot; class=&quot;headerlink&quot; title=&quot;5E模型&quot;&gt;&lt;/a&gt;5E模型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Envision（高瞻远瞩）&lt;/li&gt;
&lt;li&gt;Engage（全情投入）&lt;/li&gt;
&lt;li&gt;Energize（鼓
    
    </summary>
    
      <category term="项目管理" scheme="http://www.pmjohnfung.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>考研科目</title>
    <link href="http://www.pmjohnfung.com/categories/%E8%80%83%E7%A0%94/kaoyan-course/"/>
    <id>http://www.pmjohnfung.com/categories/考研/kaoyan-course/</id>
    <published>2017-01-10T02:12:19.000Z</published>
    <updated>2017-01-13T02:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考试科目"><a href="#考试科目" class="headerlink" title="考试科目"></a>考试科目</h1><p>一月联考考试科目：该形式招生在职研究生专业较少，其中有MBA、MEM、MPA等专业，考生需要先参加初试和复试考试，考试通过以后才能入学参加课程学习，因此其考试难度相对较大。初试考试科目有英语二和综合(其中数学是75分，逻辑推理60分，语文50分)。至少175才能进入复试</p>
<h1 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h1><ul>
<li>提前一批面试：8月份</li>
<li>提前二批面试：10月份</li>
<li>报名：10月份</li>
<li>初试：12月份</li>
<li>复试：次年3月份（面试、政治考试、体检）</li>
</ul>
<h1 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a>参考书</h1><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p>机工《数学分册》</p>
<p>机工《数学精点》</p>
<p>陈剑《考前冲刺》</p>
<p>《真题》</p>
<p>老吕的《数学母题800练》</p>
<p>陈剑《高分指南》，把整本书搞懂，里面的题做三遍</p>
<h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>《海滨逻辑》系列</p>
<p>老吕</p>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>机工《写作分册》</p>
<p>王诚的论证有效性分析和论说文真题</p>
<p>老吕</p>
<h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>王江涛的词汇书</p>
<p>老蒋《高分阅读80篇》</p>
<p>《十天搞定考研词汇》</p>
<p>《蒋军虎》系列</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;考试科目&quot;&gt;&lt;a href=&quot;#考试科目&quot; class=&quot;headerlink&quot; title=&quot;考试科目&quot;&gt;&lt;/a&gt;考试科目&lt;/h1&gt;&lt;p&gt;一月联考考试科目：该形式招生在职研究生专业较少，其中有MBA、MEM、MPA等专业，考生需要先参加初试和复试考试，考试通过以
    
    </summary>
    
      <category term="考研" scheme="http://www.pmjohnfung.com/categories/%E8%80%83%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>支付系统架构</title>
    <link href="http://www.pmjohnfung.com/categories/%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1/pay-arc/"/>
    <id>http://www.pmjohnfung.com/categories/支付业务/pay-arc/</id>
    <published>2017-01-05T14:03:18.000Z</published>
    <updated>2017-01-05T14:30:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支付系统架构"><a href="#支付系统架构" class="headerlink" title="支付系统架构"></a>支付系统架构</h1><ul>
<li><strong>账户系统</strong>：账户账务系统，一切支付结算业务的基础，一个账号可对应多个账户。包含账户性质、是否激活、账户状态、账户类型等信息。</li>
<li><strong>记账系统</strong>：记录每笔支付结算相关的资金往来。</li>
<li><strong>对账系统</strong>：包含内部业务对账与外部渠道对账，后文有详述。</li>
<li><strong>风控系统</strong>：对风险事件的监控与决策。包含政策风控、基础风控、交易风控等。</li>
<li><strong>支付系统</strong>：对接入款渠道，处理支付业务，充值本质也是支付业务。</li>
<li><strong>结算系统</strong>：对接出款渠道，处理结算业务，典型的有提现业务。</li>
<li><strong>分润系统</strong>：对涉及结算的业务进行清分轧差，与结算系统组成清算系统。</li>
<li><strong>路由系统</strong>：根据预先设定的规则，只能选择最优入款、出款渠道，降低成本，提高用户体验。</li>
</ul>
<h1 id="清结算（结算、分润）"><a href="#清结算（结算、分润）" class="headerlink" title="清结算（结算、分润）"></a>清结算（结算、分润）</h1><p>清结算系统对应业务典型的有提现和转账</p>
<p>何谓提现？我们先看下业务场景：</p>
<p>买家在淘宝上购买了商家的商品，并通过支付宝支付完成，买家收到货后确认付款，支付宝将货款结算到商家的支付宝账户，一段时间后商家将货款提现到自己的银行卡。</p>
<p>提现：用户主动发起的，将虚拟账户资金结算到本人银行资金账户，并伴随资金流由平台客户备付金账户向用户银行资金账户划拨的过程。</p>
<p>如何实现结算业务？</p>
<p>从合作方来说，有银行、银联、第三方支付公司。 主要还是以银行为主，在成本（甚至可以免费）、时效性上都比较有优势；银联的话有些差异化的产品，后面细说；采用第三方支付主要是支付服务是它，出款打包给他也方便，但是很多支付公司不提供此项服务。</p>
<p>从发起平台来说， 有企业网银、银企直联、代付接口。如果处理用户的提现申请需要用企业网银，那么有点low，这个需要财务人工处理，一般规模很小的业务量可以考虑；银企直联是很多银行提供给互联网公司的平台系统，里面有多个产品的集成，甚至有上百个接口。代付接口是很多第三方支付公司提供的，就如同提供的支付接口一样。</p>
<p>从包装产品来说，有单笔代发、批量代发、自动转账、非自动转账、 实时转账等，这些都是银行或第三方支付包装出来的产品。</p>
<p>从底层系统来说，有行内清算系统、央行大额支付系统、小额支付系统、超级网银、银联转账系统。下面细说。</p>
<p>限于篇幅，底层系统之间的区别见下图：</p>
<p><img src="../img/提现通道.png" alt=""></p>
<h1 id="对账系统"><a href="#对账系统" class="headerlink" title="对账系统"></a>对账系统</h1><p>对账其实是对一定周期内的交易进行双方确认的过程，一般都是在第二天第三方支付公司对前一日交易进行清分，生成对账单供电商平台下载，并将应结算款结算给电商平台。</p>
<p>所以对账有以下作用：</p>
<p>1、电商平台通过对账单与自身系统订单进行比对，确认是否存在异常订单；</p>
<p>2、电商平台作为结算金额的计算依据 。</p>
<p>对账一方面对信息流，一方面对资金流，信息流对账主要是确认双方订单金额、状态等是否一致，如果一致，则根据对账单计算出应结算款，与第三方实际结算款进行资金流对账。</p>
<p>对账流程：</p>
<p>1、下载（获取）对账单，用来与系统内账单进行比对</p>
<p>2、上传对账单（可能需要先对对账单命名以及内部数据简单处理）</p>
<p>3、对账单解析，以为可能接多个渠道，每个渠道提供的对账单格式不完全统一，所以需要解析成对账系统标准的格式，比如需要哪几列对应的数据，格式等样子</p>
<p>4、获取系统账单，并与对账单进行匹配</p>
<p>5、输出结果，一般正常是平账，异常结果如下</p>
<p>6、差错处理，一般有以下几种异常结果</p>
<p>A、多账：即对账单中存在但系统账单中无的账单，一般是因为调单或重订单2次支付造成</p>
<p>B、短帐：即对账单中不存在但系统账单有的账单，这种概率极低。如有，那找对方算账</p>
<p>C、金额不一致：这种比较特殊，即对账单和系统账单都存在对应的订单号，但金额不一致。这种概率极低。</p>
<h1 id="记账系统"><a href="#记账系统" class="headerlink" title="记账系统"></a>记账系统</h1><p>要搞懂记账系统，首先要了解会计基础中的复式记账及会计科目。这里不过多叙述，大家可以找本会计基础的书或者网上搜索下。以下介绍下简单的记账过程，以充值为例：</p>
<p>（银行还没结算资金给第三方支付公司）</p>
<p>借：应收款-XX银行XX账户 100元</p>
<p>贷：客户资金-XX用户XX账户 100元</p>
<p>（第二天银行将这笔钱结算给第三方支付公司了）</p>
<p>借：银行存款-XX银行XX账户 100元</p>
<p>贷：应收款-XX银行XX账户 100元</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;支付系统架构&quot;&gt;&lt;a href=&quot;#支付系统架构&quot; class=&quot;headerlink&quot; title=&quot;支付系统架构&quot;&gt;&lt;/a&gt;支付系统架构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;账户系统&lt;/strong&gt;：账户账务系统，一切支付结算业务的基础，一个账号可对应
    
    </summary>
    
      <category term="支付业务" scheme="http://www.pmjohnfung.com/categories/%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1/"/>
    
    
      <category term="支付" scheme="http://www.pmjohnfung.com/tags/%E6%94%AF%E4%BB%98/"/>
    
      <category term="业务" scheme="http://www.pmjohnfung.com/tags/%E4%B8%9A%E5%8A%A1/"/>
    
      <category term="账户" scheme="http://www.pmjohnfung.com/tags/%E8%B4%A6%E6%88%B7/"/>
    
      <category term="架构" scheme="http://www.pmjohnfung.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java接口意义</title>
    <link href="http://www.pmjohnfung.com/categories/java/java%E6%8E%A5%E5%8F%A3%E6%84%8F%E4%B9%89/"/>
    <id>http://www.pmjohnfung.com/categories/java/java接口意义/</id>
    <published>2017-01-03T12:18:46.000Z</published>
    <updated>2017-01-11T05:03:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="规范性"><a href="#规范性" class="headerlink" title="规范性"></a>规范性</h1><p>所谓的规范性，当然规范java类的，为了避免类在设计上的不一致，很常见的，假如我们定义了一个类要实现【Comparator】接口，这个大家应该比较熟悉的吧，一个作用于比较的接口，实现这个接口，就必须去覆写它的compare(比较用来排序的两个参数)和equals(指示某个其他对象是否“等于”此 Comparator)方法,所以这样就形成了一种规范，要求以实现某个接口的时候，必须具备接口原来所具有的功能，这在大型开发中显的尤为重要</p>
<h1 id="易于扩展、维护"><a href="#易于扩展、维护" class="headerlink" title="易于扩展、维护"></a>易于扩展、维护</h1><p> 比如你要做一个画板程序，其中里面有一个面板类，主要负责绘画功能，然后你就这样定义了这个类，可是在不久将来，你突然发现这个类满足不了你了，然后你又要重新设计这个类，更糟糕是你可能要放弃这个类，那么其他地方可能有引用他，这样修改起来很麻烦，如果你一开始定义一个接口，把绘制功能放在接口里，然后定义类时实现这个接口，然后你只要用这个接口去引用实现它的类就行了，以后要换的话只不过是引用另一个类而已，这样就达到维护、拓展的方便性。</p>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>一个接口它只返回你想要的结果，而不提供程序实现的细节，对外皆是透明不可见，这样就比较的安全一些，严密些</p>
<p>   其实用到接口肯定是有好处的啦，所以，如果实在是向我开始怎么都理解不了的话， 建议多开发，多敲敲，敲的多了，自然就明白了！望有不足之处，大虾门勿喷哈，要多给指点指点！   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;规范性&quot;&gt;&lt;a href=&quot;#规范性&quot; class=&quot;headerlink&quot; title=&quot;规范性&quot;&gt;&lt;/a&gt;规范性&lt;/h1&gt;&lt;p&gt;所谓的规范性，当然规范java类的，为了避免类在设计上的不一致，很常见的，假如我们定义了一个类要实现【Comparator】接口，这
    
    </summary>
    
      <category term="java" scheme="http://www.pmjohnfung.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.pmjohnfung.com/tags/java/"/>
    
      <category term="基础" scheme="http://www.pmjohnfung.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="interface" scheme="http://www.pmjohnfung.com/tags/interface/"/>
    
  </entry>
  
  <entry>
    <title>2017年计划</title>
    <link href="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/2017plan/"/>
    <id>http://www.pmjohnfung.com/categories/生活/2017plan/</id>
    <published>2017-01-02T14:57:46.000Z</published>
    <updated>2017-03-16T09:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017年三大目标"><a href="#2017年三大目标" class="headerlink" title="2017年三大目标"></a>2017年三大目标</h1><ul>
<li>挑战（个人）：完成在职研究生的考试内容的学习，目标：取得A线成绩；</li>
<li>成长（工作）：纵向、深入跟进项目、提升业务、技术方面的能力，目标：能够完全主控大项目节奏；</li>
<li>重拾（爱好）：技术知识重新抓起，目标：可独立完成核心编码；</li>
</ul>
<h1 id="实现目标规划"><a href="#实现目标规划" class="headerlink" title="实现目标规划"></a>实现目标规划</h1><h2 id="挑战（计划中）"><a href="#挑战（计划中）" class="headerlink" title="挑战（计划中）"></a>挑战（计划中）</h2><p>1.制定学习计划（明天完善清楚大的里程碑内容1.10）</p>
<h2 id="成长（持续完善）"><a href="#成长（持续完善）" class="headerlink" title="成长（持续完善）"></a>成长（持续完善）</h2><p>1.每天坚持一篇文章，主要描述业务、技术相关内容，提升自己的理解；</p>
<p>2.至少阅读一份PRD文档，且能够读明白；</p>
<p>3.每个项目均需列出WBS；</p>
<p>4.项目的推进过程需提前到idea阶段；积极推动从PRD产出到落地的整个过程；</p>
<p>5.记录每个项目中重点遇到的问题；</p>
<p>6.利用经验挑战全新的工作，梳理现有项目开展方式，学习公司业务，找痛点，针对痛点实际解决问题；</p>
<h2 id="重拾"><a href="#重拾" class="headerlink" title="重拾"></a>重拾</h2><p>1.每天至少一小时技术学习时间；</p>
<p>2.了解主流框架及使用；</p>
<p>3.完成自己的一个作品（还未确认）；</p>
<h1 id="重大里程碑（持续更新）"><a href="#重大里程碑（持续更新）" class="headerlink" title="重大里程碑（持续更新）"></a>重大里程碑（持续更新）</h1><table>
<thead>
<tr>
<th>日期</th>
<th>事件</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-01-09</td>
<td>2017年个人目标idea规划</td>
</tr>
<tr>
<td>2017-03-01</td>
<td>已工作，想寻找好的发展机会</td>
</tr>
</tbody>
</table>
<h1 id="日常作息"><a href="#日常作息" class="headerlink" title="日常作息"></a>日常作息</h1><p>1:00-8:00 晚上休息时间</p>
<p>8:00-9:30 起床、吃饭、路上时间</p>
<p>9:30-12:00 上班时间</p>
<p>12:00-13:00 中饭时间</p>
<p>13:00-14:00 午休时间</p>
<p>14:00-20:00 上班时间</p>
<p>20:00-21:00 晚餐、路上时间</p>
<p>21:00-1:00 学习时间</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2017年三大目标&quot;&gt;&lt;a href=&quot;#2017年三大目标&quot; class=&quot;headerlink&quot; title=&quot;2017年三大目标&quot;&gt;&lt;/a&gt;2017年三大目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;挑战（个人）：完成在职研究生的考试内容的学习，目标：取得A线成绩；&lt;/l
    
    </summary>
    
      <category term="生活" scheme="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="http://www.pmjohnfung.com/categories/java/javabase/"/>
    <id>http://www.pmjohnfung.com/categories/java/javabase/</id>
    <published>2016-12-31T06:52:15.000Z</published>
    <updated>2017-01-11T05:04:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String类为什么是final的"><a href="#String类为什么是final的" class="headerlink" title="String类为什么是final的"></a>String类为什么是final的</h1><hr>
<h2 id="final-类"><a href="#final-类" class="headerlink" title="final 类"></a>final 类</h2><ul>
<li>final 关键字含义</li>
</ul>
<p>凡是对成员变量或者本地变量(在方法中的或者代码块中的变量称为本地变量)声明为final的都叫作final变量。final变量经常和static关键字一起使用，作为常量。<br>final 变量是只读的</p>
<ul>
<li>什么是final变量</li>
</ul>
<p>final也可以声明方法。方法前面加上final关键字，代表这个方法不可以被子类的方法重写。如果你认为一个方法的功能已经足够完整了，子类中不需要改变的话，你可以声明此方法为final。final方法比非final方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Sting str = <span class="string">"lo"</span> ; </div><div class="line">str = <span class="keyword">new</span> String(<span class="string">"wo"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>什么是final方法</li>
</ul>
<p>final也可以声明方法。方法前面加上final关键字，代表这个方法不可以被子类的方法重写。如果你认为一个方法的功能已经足够完整了，子类中不需要改变的话，你可以声明此方法为final。final方法比非final方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定。下面是final方法的例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonalLoan</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"personal loan"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheapPersonalLoan</span> <span class="keyword">extends</span> <span class="title">PersonalLoan</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"cheap personal loan"</span>; <span class="comment">//compilation error: overridden method is final</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>什么是final类</li>
</ul>
<p>使用final来修饰的类叫作final类。final类通常功能是完整的，它们不能被继承。Java中有许多类是final的，譬如String, Interger以及其他包装类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonalLoan</span></span>&#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CheapPersonalLoan</span> <span class="keyword">extends</span> <span class="title">PersonalLoan</span></span>&#123;  <span class="comment">//compilation error: cannot inherit from final class</span></div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="final-关键字的优点"><a href="#final-关键字的优点" class="headerlink" title="final 关键字的优点"></a>final 关键字的优点</h2><p>下面总结了一些使用final关键字的好处</p>
<ul>
<li>final关键字提高了性能。JVM和Java应用都会缓存final变量。</li>
<li>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</li>
<li>使用final关键字，JVM会对方法、变量及类进行优化。</li>
</ul>
<h2 id="其他重要知识点"><a href="#其他重要知识点" class="headerlink" title="其他重要知识点"></a>其他重要知识点</h2><ul>
<li>final关键字可以用于成员变量、本地变量、方法以及类。</li>
<li>final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误。</li>
<li>你不能够对final变量再次赋值。</li>
<li>本地变量必须在声明时赋值。</li>
<li>在匿名类中所有变量都必须是final变量。</li>
<li>final方法不能被重写。</li>
<li>final类不能被继承。</li>
<li>final关键字不同于finally关键字，后者用于异常处理。</li>
<li>final关键字容易与finalize()方法搞混，后者是在Object类中定义的方法，是在垃圾回收之前被JVM调用的方法。</li>
<li>接口中声明的所有变量本身是final的。</li>
<li>final和abstract这两个关键字是反相关的，final类就不可能是abstract的。</li>
<li>final方法在编译阶段绑定，称为静态绑定(static binding)。</li>
<li>没有在声明时初始化final变量的称为空白final变量(blank final variable)，它们必须在构造器中初始化，或者调用this()初始化。不这么做的话，编译器会报错“final变量(变量名)需要进行初始化”。</li>
<li>将类、方法、变量声明为final能够提高性能，这样JVM就有机会进行估计，然后优化。</li>
<li>按照Java代码惯例，final变量就是常量，而且通常常量名要大写：</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;String类为什么是final的&quot;&gt;&lt;a href=&quot;#String类为什么是final的&quot; class=&quot;headerlink&quot; title=&quot;String类为什么是final的&quot;&gt;&lt;/a&gt;String类为什么是final的&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;
    
    </summary>
    
      <category term="java" scheme="http://www.pmjohnfung.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.pmjohnfung.com/tags/java/"/>
    
      <category term="基础" scheme="http://www.pmjohnfung.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="String" scheme="http://www.pmjohnfung.com/tags/String/"/>
    
      <category term="final" scheme="http://www.pmjohnfung.com/tags/final/"/>
    
  </entry>
  
  <entry>
    <title>支付账务相关知识（一）</title>
    <link href="http://www.pmjohnfung.com/categories/%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1/pay-core-account/"/>
    <id>http://www.pmjohnfung.com/categories/支付业务/pay-core-account/</id>
    <published>2016-12-30T05:33:40.000Z</published>
    <updated>2017-01-03T06:09:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="会计科目"><a href="#会计科目" class="headerlink" title="会计科目"></a>会计科目</h1><p>会计科目通常会分为很多类，假设我们现在只建设最简单的支付系统，那么至少我们需要熟知以下三个科目大类：</p>
<p><strong>资产类科目</strong>：通常余额反映在借方，银行存款、固定资产等通常记录在资产类科目下。</p>
<p><strong>负债类科目</strong>：通常余额反映在贷方，客户负债，应付款等通常记录在负债类科目下。</p>
<p><strong>共同类科目</strong>：根据实际业务不同，具体的科目余额既可以反映在借方也可以在贷方，通常来说待清算款项会记录在共同类科目中。</p>
<blockquote>
<p>例如在资产类科目下，我们设立一个一级科目叫做银行存款（科目号110），在银行存款科目下设置二级科目叫做工商银行存款（科目号 110 01），在工商银行存款科目下设置三级科目叫做工商银行XX支行银行账户（科目号为 11001 01）。大家注意看括弧里的黑体字，下级科目号=上级科目号+自己本身独立分配的科目号，这样就能很轻松地通过一个下级科目号推断出其上级科目。</p>
</blockquote>
<p>另外顺带一提，假如一个会计科目不存在子科目，那么我们就认为其是底层科目，所有反应实际业务活动的账务必须记录在底层科目中。</p>
<h1 id="资金平衡关系："><a href="#资金平衡关系：" class="headerlink" title="资金平衡关系："></a>资金平衡关系：</h1><p>学过会计恒等式的同学都知道，资产=负债+所有者权益。对我们上述假定的支付系统而言，由于没有所有者权益，所以恒等式变更为资产+共同类借方余额=负债+共同类贷方余额。整体而言，无论什么业务状况下，我们必须保证系统内所有借方余额正好等于贷方余额，否则系统可以判定为有BUG。</p>
<p><strong>记账规则</strong> ：</p>
<p>既然设置了科目用来进行账务的记录，那么接下来咱们就必须明确在不同业务活动中我们如何记账。<br>在会计学中，我们至少用一组会计分录来进行账务变动的记录（因为要保持账务的平衡，有借必有贷，借贷必相等）。</p>
<p>例如：</p>
<p>有个支付宝用户通过网银向自己的支付宝账户充值100元，交易完成后支付宝内部账务可能会这样记录（以一级科目为例）：</p>
<p>借：401 待清算充值款  100元</p>
<p>贷：201 客户负债账户  100元</p>
<p>tips:由于网银收单获取的资金，银行通常是T+1日结算给支付宝，所以这笔钱还没落地到支付宝的银行账户，故记录在待清算充值科目中。</p>
<p>日终时，银行发来对账文件，确认该笔交易，对账成功，支付宝系统会进行以下记账：</p>
<p>借：110 银行存款  100元</p>
<p>贷：401 待清算充值款 100元</p>
<p>大家可以看到，支付宝系统在确认对账成功，银行资金入账后，将原本的待清算账户中借方的100元挪动到了银行存款中。</p>
<p>在实际业务过程中，记账的规则不会如此简单，会在一个业务过程中同时发生好几笔会计分录变动，例如：</p>
<p>用户小明（系统代号001）向商户小红（系统代号002）购买商品，使用支付宝账户支付，价格100元，支付宝向小红收取手续费1元。交易完成后支付宝会进行如下记账：</p>
<p>借：201 001 小明支付宝账户  100元</p>
<p>贷：201 002 小红支付宝账户 100元</p>
<p>借：201 002 小红支付宝账户 1元</p>
<p>贷：401 001 支付宝收益账户 1元</p>
<p>这组记账，对支付系统来说，是一个不可分割的事物。要不然同时成功，要不然同时失败，绝对不会出现前一组分录记账成功，后一组失败的情况。那么这样的针对具体业务情况的记账逻辑，我们就称之为记账规则。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;会计科目&quot;&gt;&lt;a href=&quot;#会计科目&quot; class=&quot;headerlink&quot; title=&quot;会计科目&quot;&gt;&lt;/a&gt;会计科目&lt;/h1&gt;&lt;p&gt;会计科目通常会分为很多类，假设我们现在只建设最简单的支付系统，那么至少我们需要熟知以下三个科目大类：&lt;/p&gt;
&lt;p&gt;&lt;str
    
    </summary>
    
      <category term="支付业务" scheme="http://www.pmjohnfung.com/categories/%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>2015总结及2016年展望</title>
    <link href="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/2015-summary/"/>
    <id>http://www.pmjohnfung.com/categories/生活/2015-summary/</id>
    <published>2016-01-04T05:06:13.000Z</published>
    <updated>2017-01-11T05:11:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2015年逝去的青春"><a href="#2015年逝去的青春" class="headerlink" title="2015年逝去的青春"></a>2015年逝去的青春</h1><ul>
<li>成功完成北斗项目的申报工作，并作为主要人员参与其中；</li>
<li>成功管理北斗平台的开发工作，增加自己的管理经验，增加与上级多部门的沟通协调经验；</li>
<li>担任大项目的计划管理、版本管理、风险管理工作对自己的大项目管理经验有了明显的提高；</li>
<li>成功的步入婚姻的殿堂，拥有了稳定的家庭；</li>
<li>一直坚持阅读，包括管理类、技术类和心理类书籍10余本；</li>
<li>坚持做自己喜欢的岗位，坚持做自己喜欢的事情，非工作时间研究下java的热门技术；</li>
<li>坚持参加项目管理的培训与交流，与培训班的朋友们一起交流项目管理过程中的得失、经验；</li>
<li>坚持了1个月的健身没有能够继续坚持是个遗憾，2016年需要弥补这个遗憾；</li>
<li>部门领导的频繁更换导致了情绪的不同程度波动，造成了团队工作氛围下降，个人情绪低落，后来即时调整，对个人的职业生涯是个很好的锻炼；</li>
<li>2015年我应该可以担任更具有挑战性的工作，我没有主动承担，2016年必须要有所突破；</li>
<li>2015年没有能够带家人出去旅游，2016年需要注意；</li>
</ul>
<h1 id="2016年规划"><a href="#2016年规划" class="headerlink" title="2016年规划"></a>2016年规划</h1><ul>
<li>完善项目管理体系的经验整理；</li>
<li>培养大项目管理的经验，承接更大或重要的项目；</li>
<li>继续坚持阅读精品书籍10本以上；</li>
<li>坚持锻炼；</li>
<li>带家人一起旅行；</li>
<li>拥抱互联网思维；</li>
<li>坚持自己感兴趣的事情；</li>
<li>减轻爱人的生活负担</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2015年逝去的青春&quot;&gt;&lt;a href=&quot;#2015年逝去的青春&quot; class=&quot;headerlink&quot; title=&quot;2015年逝去的青春&quot;&gt;&lt;/a&gt;2015年逝去的青春&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;成功完成北斗项目的申报工作，并作为主要人员参与其中；&lt;/li&gt;

    
    </summary>
    
      <category term="生活" scheme="http://www.pmjohnfung.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="2015" scheme="http://www.pmjohnfung.com/tags/2015/"/>
    
      <category term="总结" scheme="http://www.pmjohnfung.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="规划" scheme="http://www.pmjohnfung.com/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>java 回调机制</title>
    <link href="http://www.pmjohnfung.com/categories/java/java-callback/"/>
    <id>http://www.pmjohnfung.com/categories/java/java-callback/</id>
    <published>2015-07-22T04:58:39.000Z</published>
    <updated>2017-01-11T05:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>模块之间总是存在这一定的接口，从调用方式上看，可以分为三类：同步调用、回调和异步调用。同步调用是一种阻塞式调用，也是我们在写程序中经常使用的；回调是一种双向的调用模式，也就是说，被调用的接口被调用时也会调用对方的接口，这句话可能有点绕，等文章后面举例说明；异步调用是一种类似消息或事件的机制，解决了同步阻塞的问题，举例来讲：A通知B后，他们各走各的路，互不影响，不用像同步调用那样，A通知B后，非得等到B走完后，A才继续走。回调是异步的基本，因此下面着重说回调机制。</p>
<p><img src="/img/java-callback.png" alt=""></p>
<p>我们暂且不讨论回调的一些名词和运行机制，首先说为什么会存在回调这样一种调用？同步和异步机制的出现不必多说，大家心知肚明，那回调机制为什么会出现呢？在我们现实生活中，有如下这样场景：有一位老板很忙，他没有时间盯着员工干活，然后他告诉自己的雇员，干完当前这些事情后，告诉他干活的结果。这个例子其实是一个回调+异步的例子，再举一个例子，A程序员写了一段程序a，其中预留了回调函数接口，并封装好了该程序，程序员B让a调用自己的程序b中的一个方法，于是，他通过a中的接口回调自己b中的方法，到这里你可能似懂非懂了，后面会继续说明回调的出现原因。接下来我们把上面例子变成代码，看到网上很多人最后搞混了异步和回调，因此例子中不加入异步调用。（注意：回调可不是解决什么调用时间过长问题，那是异步！）</p>
<p>首先创建一个回调接口，让老板得告知干完活如何找到他的方式：留下老板办公室地址：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> net.easyway.test;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 此接口为联系的方式，不论是电话号码还是联系地址，作为 </div><div class="line"> * 老板都必须要实现此接口 </div><div class="line"> * <span class="doctag">@author</span> Administrator </div><div class="line"> * </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBackInterface</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建回调对象，就是老板本人，因为员工干完活后要给他打电话，因此老板必须实现回调接口，不然员工去哪里找老板？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> net.easyway.test;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 老板是作为上层应用身份出现的，下层应用（员工）是不知道 </div><div class="line"> * 有哪些方法，因此他想被下层应用（员工）调用必须实现此接口 </div><div class="line"> * <span class="doctag">@author</span> Administrator </div><div class="line"> * </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">CallBackInterface</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"收到了！！"</span> + System.currentTimeMillis());  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建控制类，也就是员工对象，他必须持有老板的地址（回调接口），即使老板换了一茬又一茬，办公室不变，总能找到对应的老板。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> net.easyway.test;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 员工类，必须要记住，这是一个底层类，底层是不了解上层服务的 </div><div class="line"> * <span class="doctag">@author</span> Administrator </div><div class="line"> * </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> CallBackInterface callBack = <span class="keyword">null</span>;  </div><div class="line">      </div><div class="line">    <span class="comment">//告诉老板的联系方式，也就是注册  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallBack</span><span class="params">(CallBackInterface callBack)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.callBack = callBack;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">//工人干活  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="comment">//1.开始干活了  </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;  </div><div class="line">            System.out.println(<span class="string">"第【"</span> + i + <span class="string">"】事情干完了！"</span>);  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="comment">//2.告诉老板干完了  </span></div><div class="line">        callBack.execute();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> net.easyway.test;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">          </div><div class="line">          </div><div class="line">        Employee emp = <span class="keyword">new</span> Employee();  </div><div class="line">          </div><div class="line">        <span class="comment">//将回调对象（上层对象）传入，注册  </span></div><div class="line">        emp.setCallBack(<span class="keyword">new</span> Boss());  </div><div class="line">          </div><div class="line">        <span class="comment">//开启控制器对象运行  </span></div><div class="line">        emp.doSome();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个例子，大家可以和程序员A和程序员B的那个例子结合对照下。</p>
<p>看了上面的例子，有的人可能认为，这不是面向接口的编程吗？怎么会是回调，你再好好想想，咱们面向接口的编程的调用关系？在三层中，当业务层调用数据层时，是不需要把业务层自身传递到数据层的，并且这是一种上层调用下层的关系，比如我们在用框架的时候，一般直接调用框架提供的API就可以了，但回调不同，当框架不能满足需求，我们想让框架来调用自己的类方法，怎么做呢？总不至于去修改框架吧。许多优秀的框架提几乎都供了相关的接口，我们只需要实现相关接口，即可完成了注册，然后在合适的时候让框架来调用我们自己的类，还记不记得我们在使用Struts时，当我们编写Action时，就需要继承Action类，然后实现execute()方法，在execute()方法中写咱们自己的业务逻辑代码，完成对用户请求的处理。由此可以猜测，框架和容器中会提供大量的回调接口，以满足个性化的定制。</p>
<p>不知道上面这个例子懂了没有？我们现在可以想象Filter和Interceptor的区别了，这两者其中最大的一个区别是Filter是基于回调函数，需要容器的支持，没有容器是无法回调doFilter()方法，而Interceptor是基于Java的反射机制的，和容器无关。那到此是否又将反射和回调搞混了呢？请见我讲Java动态代理的博客《以此之长，补彼之短—-AOP(代理模式)》。</p>
<p>总之，要明确的一点是，首先要搞清回调函数出现的原因，也就是适用场景，才能搞清楚回调机制，不然事倍功半。</p>
<p>最后，再举一例，为了使我们写的函数接近完美，就把一部分功能外包给别人，让别人个性化定制，至于别人怎么实现不管，我唯一要做的就是定义好相关接口，这一设计允许了底层代码调用高层定义的子程序，增强程序灵活性，和反射有着异曲同工之妙，我觉得这才是回调的真正原因，以上是我个人一些理解，望讨论！</p>
<p>转自：<a href="http://blog.csdn.net/pi9nc/article/details/23169357" target="_blank" rel="external">http://blog.csdn.net/pi9nc/article/details/23169357</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模块之间总是存在这一定的接口，从调用方式上看，可以分为三类：同步调用、回调和异步调用。同步调用是一种阻塞式调用，也是我们在写程序中经常使用的；回调是一种双向的调用模式，也就是说，被调用的接口被调用时也会调用对方的接口，这句话可能有点绕，等文章后面举例说明；异步调用是一种类似
    
    </summary>
    
      <category term="java" scheme="http://www.pmjohnfung.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.pmjohnfung.com/tags/java/"/>
    
      <category term="回调" scheme="http://www.pmjohnfung.com/tags/%E5%9B%9E%E8%B0%83/"/>
    
  </entry>
  
  <entry>
    <title>优秀项目经理需具备的素质</title>
    <link href="http://www.pmjohnfung.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/pm-2/"/>
    <id>http://www.pmjohnfung.com/categories/项目管理/pm-2/</id>
    <published>2015-07-15T04:55:44.000Z</published>
    <updated>2017-02-03T09:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标驱动，系统思维，风险意识，数据量化"><a href="#目标驱动，系统思维，风险意识，数据量化" class="headerlink" title="目标驱动，系统思维，风险意识，数据量化"></a>目标驱动，系统思维，风险意识，数据量化</h1><p>凡事预则立，不预则废。如果你不知道要到哪里？给你一张地图也没有用。目标驱动首先要有最基本的计划管理和时间管理能力。对于一个项目，我们过程中做的所有工作都是为了要达到项目目标，因此在项目各个阶段所有活动都需要考虑对达成目标的影响，当发现偏差后及时纠正。目标驱动让我们从无目的的事后应急变成了有计划有目的的事前预测。目标驱动不是要抛弃过程，项目的成功涉及到过程，人和方法工具技术。为了达到项目目标，我们要根据项目的实际情况采取一系列项目原来已经总结的最佳实践形成一套过程，高效的过程和积极心态的人是保证项目目标达成的关键。因此作为项目经理要时刻问自己，项目的目标是什么？项目当前状态和我达成目标的差距是什么？我如何解决和应对。</p>
<p>项目的成功受到多方面的因素的影响，而且各个因素之间还存在正反作用力。系统思维就是要让我们能够清楚的认识到影响项目目标和成功的各个要素，以及它们之间存在的关系。形成一种适合项目的动态系统模型，通过这个动态模型去平衡项目各方干系人的利益，平衡项目四要素之间的关系，平衡项目的短期和长期的利益。项目经理的一个重要能力就是平衡，没有最优解，只有满意解，懂得了平衡就知道当项目出现变更和调整的时候如何更好的应对。从单要素最优的单向思维过渡到关注整个系统的全局思维模式上。</p>
<p>风险意识简单来讲就是项目在执行过程中可能发生的各种问题我都事先预见到了而采取了适当的缓解措施，这样才能够真正的让项目能够按照预先制定的计划和目标进行。再简单点就是如果风险管理做得好，项目是不应该失败的。君子安而不忘危，存而不忘亡，治而不忘乱。风险管理的重点正是在于要形成风险意识，要能够通过历史经验的积累，能够把项目的关键风险识别出来，使项目能够从事后的救火转变到事前的防备，使项目能够在前面紧张后面轻松。</p>
<p>要谈及量化管理首先应该要培训用数据说话的分析思维。在软件项目管理中我们做度量的目的，就是要收集和分析各种历史数据，通过对数据的分析来知道项目真正的效率，同时为后续项目提供各种估算参数数据。以数据说话让我们从全凭主观经验臆断转变到对事物的客观数据分析上。只有能够收集数据，分析数据我们才可能持续改进。有了数据意识后就是要有统计和量化管理方面的意识，利用统计学的思维和量化管理手段不仅仅是让我们的过程稳定和受控制，能够去发现项目执行过程中特殊原因引起的波动，针对特殊波动进行根源分析并采取纠正行动；还能够让我们能够根据预测模型更加准确的预测项目能够达成目标的程度和概率。</p>
<h1 id="软技能"><a href="#软技能" class="headerlink" title="软技能"></a>软技能</h1><h2 id="沟通能力"><a href="#沟通能力" class="headerlink" title="沟通能力"></a>沟通能力</h2><p>沟通能力指通过语言表达，使干系人能够清楚的理解需要表达内容，理解干系人的表达内容，通过有效的沟通达到目标的实现；</p>
<h2 id="领导能力"><a href="#领导能力" class="headerlink" title="领导能力"></a>领导能力</h2><h2 id="影响能力"><a href="#影响能力" class="headerlink" title="影响能力"></a>影响能力</h2><h2 id="号召能力"><a href="#号召能力" class="headerlink" title="号召能力"></a>号召能力</h2><h2 id="协调能力"><a href="#协调能力" class="headerlink" title="协调能力"></a>协调能力</h2><h2 id="管理能力"><a href="#管理能力" class="headerlink" title="管理能力"></a>管理能力</h2><h2 id="组织能力"><a href="#组织能力" class="headerlink" title="组织能力"></a>组织能力</h2><h2 id="决策能力"><a href="#决策能力" class="headerlink" title="决策能力"></a>决策能力</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目标驱动，系统思维，风险意识，数据量化&quot;&gt;&lt;a href=&quot;#目标驱动，系统思维，风险意识，数据量化&quot; class=&quot;headerlink&quot; title=&quot;目标驱动，系统思维，风险意识，数据量化&quot;&gt;&lt;/a&gt;目标驱动，系统思维，风险意识，数据量化&lt;/h1&gt;&lt;p&gt;凡事
    
    </summary>
    
      <category term="项目管理" scheme="http://www.pmjohnfung.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="http://www.pmjohnfung.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="优秀" scheme="http://www.pmjohnfung.com/tags/%E4%BC%98%E7%A7%80/"/>
    
      <category term="素质" scheme="http://www.pmjohnfung.com/tags/%E7%B4%A0%E8%B4%A8/"/>
    
  </entry>
  
  <entry>
    <title>项目管理内容感触</title>
    <link href="http://www.pmjohnfung.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/pm-1/"/>
    <id>http://www.pmjohnfung.com/categories/项目管理/pm-1/</id>
    <published>2015-07-14T04:52:48.000Z</published>
    <updated>2017-01-11T04:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统化思维"><a href="#系统化思维" class="headerlink" title="系统化思维"></a>系统化思维</h1><p>项目开始前需要将项目的整个过程思考以便，包括我们要做什么，打算怎么做，分几个步骤或阶段来做，一共涉及多少的工作，工作如何拆分，分配到人后如何监控项目风险，如何进行沟通等等，都需要系统化的思维来考虑问题。</p>
<h1 id="关键点思维"><a href="#关键点思维" class="headerlink" title="关键点思维"></a>关键点思维</h1><p>在系统化思维的思考下，完成项目整体的考虑，然后需要通过关键点思维重点考虑那些工作是重点关注的、那些工作会有风险、然后开展项目工作，一步一步按照进度来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系统化思维&quot;&gt;&lt;a href=&quot;#系统化思维&quot; class=&quot;headerlink&quot; title=&quot;系统化思维&quot;&gt;&lt;/a&gt;系统化思维&lt;/h1&gt;&lt;p&gt;项目开始前需要将项目的整个过程思考以便，包括我们要做什么，打算怎么做，分几个步骤或阶段来做，一共涉及多少的工作，工作
    
    </summary>
    
      <category term="项目管理" scheme="http://www.pmjohnfung.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
</feed>
